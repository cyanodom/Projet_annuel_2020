{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","sendFileForFirstDraw","event","formData","FormData","file","target","files","append","axios","post","headers","then","response","network","data","drawNetwork","sendFileForSteinerResult","setState","loaderState","get","receivedData","nodes","edges","addedNodes","console","log","Poids","Penality","drawSteinerResult","map","node","id","label","toString","group","edge","from","to","container","document","getElementById","window","vis","Network","shape","size","font","color","align","borderWidth","width","initialNodes","added_nodes","concat","drawed_network","state","this","AppBar","position","Toolbar","style","itemAlign","Typography","variant","noWrap","Container","marginTop","Grid","alignItems","item","xs","Button","startIcon","fullWidth","Input","type","name","accept","onChange","opacity","endIcon","onClick","className","display","textAlign","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wYAiBqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,qBAAuB,SAACC,GACtB,IACMC,EAAW,IAAIC,SACfC,EAAOH,EAAMI,OAAOC,MAAM,GAChCJ,EAASK,OAAO,SAASH,GAMzBI,IAAMC,KATM,0CASIP,EALD,CACXQ,QAAS,CACL,eAAgB,yBAGSC,MAAK,SAACC,GACrC,IAAMC,EAAUD,EAASE,KACzB,EAAKC,YAAYF,OAnBF,EAuBnBG,yBAAyB,SAACf,GAExB,EAAKgB,SAAS,CAACC,YAAY,UAG3BV,IAAMW,IAFM,+CAEGR,MAAK,SAACC,GACnB,IAAMQ,EAAcR,EAASE,KACvBO,EAAQD,EAAY,MACpBE,EAAQF,EAAY,MACpBG,EAAaH,EAAY,YACzBP,EAAU,GAChBA,EAAO,MAAUS,EACjBT,EAAO,MAAUQ,EACjBR,EAAO,YAAkBU,EACzBC,QAAQC,IAAI,UAAWZ,GAEvB,EAAKI,SAAS,CAACC,YAAY,SAC3B,EAAKD,SAAS,CAACS,MAAQN,EAAY,MAAUO,SAASP,EAAY,WAClE,EAAKQ,kBAAkBf,OAzCR,EAgDnBE,YAAc,SAACF,GACb,IAAMQ,EAAQR,EAAQQ,MAAMQ,KAAI,SAACC,GAC/B,MAAO,CAACC,GAAKD,EAAME,MAAQF,EAAKG,WAAWC,MAAO,MAE9CZ,EAAQT,EAAQS,MAAMO,KAAI,SAACM,GAC/B,MAAO,CAACC,KAAMD,EAAK,GAAGE,GAAIF,EAAK,GAAGH,MAAOG,EAAK,GAAGF,eAI/CK,EAAYC,SAASC,eAAe,aACpC1B,EAAO,CACTO,MAAOA,EACPC,MAAOA,GAiBTT,EAAU,IAAI4B,OAAOC,IAAIC,QAAQL,EAAWxB,EAf9B,CACZO,MAAO,CACLuB,MAAO,UACPC,KAAM,GACNC,KAAM,CACJD,KAAM,GACNE,MAAO,UACPC,MAAM,UAERC,YAAa,GAEf3B,MAAO,CACL4B,MAAO,MA1EM,EAkFnBtB,kBAAoB,SAACf,GACnB,IAAMsC,EAAetC,EAAQQ,MAAMQ,KAAI,SAACC,GACtC,MAAO,CAACC,GAAKD,EAAME,MAAQF,EAAKG,WAAWC,MAAO,MAK9Cb,EAHaR,EAAQuC,YAAYvB,KAAI,SAACC,GAC1C,MAAO,CAACC,GAAID,EAAME,MAAQF,EAAKG,WAAYc,MAAO,UAE3BM,OAAOF,GAC1B7B,EAAQT,EAAQS,MAAMO,KAAI,SAACM,GAC/B,MAAO,CAACC,KAAMD,EAAK,GAAGE,GAAIF,EAAK,GAAGH,MAAOG,EAAK,GAAGF,eAI/CK,EAAYC,SAASC,eAAe,aACpC1B,EAAO,CACTO,MAAOA,EACPC,MAAOA,GAiBHgC,EAAiB,IAAIb,OAAOC,IAAIC,QAAQL,EAAWxB,EAf3C,CACZO,MAAO,CACLuB,MAAO,UACPC,KAAM,GACNC,KAAM,CACJD,KAAM,GACNE,MAAO,UACPC,MAAM,UAERC,YAAa,GAEf3B,MAAO,CACL4B,MAAO,KAIXT,OAAOa,eAAiBA,GAjHxB,EAAKC,MAAQ,CAACrC,YAAY,OAAOQ,MAAQ,EAAIC,SAAW,GAHvC,E,qDA6HjB,OAFAH,QAAQC,IAAI+B,KAAKD,MAAMrC,aAGrB,6BACE,kBAACuC,EAAA,EAAD,CAAQC,SAAS,YACjB,kBAACC,EAAA,EAAD,CAASC,MAAS,CAACC,UAAW,YAG9B,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKhB,MAAM,UAAUC,MAAM,SAASgB,QAAM,GAA9D,iBAGA,kBAACL,EAAA,EAAD,CAASC,MAAS,CAACC,UAAW,aAK9B,kBAACI,EAAA,EAAD,CAAWL,MAAO,CAACM,UAAU,QAC7B,kBAACC,EAAA,EAAD,CAAM7B,WAAS,EAAC8B,WAAW,UAC3B,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,CACIR,QAAQ,YACRhB,MAAM,UAENyB,UAAW,kBAAC,IAAD,MACXC,WAAW,GAEf,kBAACC,EAAA,EAAD,CAAOC,KAAK,OACV5C,GAAG,SAAS6C,KAAK,SACjBC,OAAO,OAAOC,SAAUtB,KAAKxD,qBAC7ByE,WAAW,EACXb,MAAO,CAACmB,QAAQ,EAAGrB,SAAS,cAX9B,2BAgBA,kBAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,CACIR,QAAQ,YACRhB,MAAM,UAENiC,QAAS,kBAAC,IAAD,MACTC,QAASzB,KAAKxC,yBACdyD,WAAW,GANf,oBAiBA,yBAAK1C,GAAG,aACR,yBAAKmD,UAAU,mCAAmCtB,MAAO,CAACuB,QAAQ3B,KAAKD,MAAMrC,gBAE7E,kBAACiD,EAAA,EAAD,CAAM7B,WAAS,EAAC8B,WAAW,UAC3B,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,CACER,QAAQ,WACRhB,MAAM,UACNa,MAAO,CAACwB,UAAW,UACnBX,WAAW,GAJb,SAI0BjB,KAAKD,MAAM7B,QAErC,kBAACyC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CACAR,QAAQ,WACRhB,MAAM,UACNa,MAAO,CAACwB,UAAW,UACnBX,WAAW,GAJX,eAI2BjB,KAAKD,MAAM5B,kB,GAjMf0D,aCLbC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrD,SAASC,eAAe,SDyHpB,kBAAmBqD,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3E,QAAQ2E,MAAMA,EAAMC,c","file":"static/js/main.a2028079.chunk.js","sourcesContent":["import './App.css';\nimport axios from 'axios'\nimport React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Input from '@material-ui/core/Input';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SendIcon from '@material-ui/icons/Send';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\n\nimport Button from '@material-ui/core/Button'\n\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {loaderState:\"none\",Poids : 0 , Penality : 0 };\n  }\n\n  \n  sendFileForFirstDraw = (event)=>{\n    const url = 'http://localhost:5000/upload_first_time';\n    const formData = new FormData();\n    const file = event.target.files[0]\n    formData.append('graphe',file)\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    axios.post(url, formData,config).then((response)=> {\n      const network = response.data\n      this.drawNetwork(network)\n    })\n  }\n  \n  sendFileForSteinerResult=(event)=>{\n    // draw loading\n    this.setState({loaderState:\"block\"})\n    const url = 'http://localhost:5000/upload_steiner_result';\n    \n    axios.get(url).then((response)=> {\n      const receivedData =response.data\n      const nodes = receivedData['nodes']\n      const edges = receivedData['edges']\n      const addedNodes = receivedData['added_nodes']\n      const network = {}\n      network['edges']=edges\n      network['nodes']=nodes\n      network['added_nodes'] = addedNodes\n      console.log('network', network)\n      // undraw loading\n      this.setState({loaderState:\"none\"})\n      this.setState({Poids : receivedData['poids'],Penality:receivedData['penality']})\n      this.drawSteinerResult(network)\n      \n      // draw()\n    })\n\n  }\n  \n  drawNetwork = (network)=>{\n    const nodes = network.nodes.map((node)=>{\n      return {id : node, label : node.toString(),group: 0}\n    })\n    const edges = network.edges.map((edge)=>{\n      return {from: edge[0],to: edge[1],label: edge[2].toString()}\n    })\n\n    // create a network\n    var container = document.getElementById(\"mynetwork\");\n    var data = {\n      nodes: nodes,\n      edges: edges\n    };\n    var options = {\n      nodes: {\n        shape: \"ellipse\",\n        size: 30,\n        font: {\n          size: 16,\n          color: \"#ffffff\",\n          align:\"center\"\n        },\n        borderWidth: 2\n      },\n      edges: {\n        width: 2\n      }\n    };\n    network = new window.vis.Network(container, data, options);\n\n\n  }\n\n  drawSteinerResult = (network)=>{\n    const initialNodes = network.nodes.map((node)=>{\n      return {id : node, label : node.toString(),group: 1}\n    })\n    const addedNodes = network.added_nodes.map((node)=>{\n      return {id: node, label : node.toString(), color :'red'}\n    })\n    const nodes = addedNodes.concat(initialNodes)\n    const edges = network.edges.map((edge)=>{\n      return {from: edge[0],to: edge[1],label: edge[2].toString()}\n    })\n\n    // create a network\n    var container = document.getElementById(\"mynetwork\");\n    var data = {\n      nodes: nodes,\n      edges: edges\n    };\n    var options = {\n      nodes: {\n        shape: \"ellipse\",\n        size: 30,\n        font: {\n          size: 16,\n          color: \"#ffffff\",\n          align:\"center\"\n        },\n        borderWidth: 2\n      },\n      edges: {\n        width: 2\n      }\n    };\n    const drawed_network = new window.vis.Network(container, data, options);\n    window.drawed_network = drawed_network\n\n\n  }\n\n  \n  render() {\n    console.log(this.state.loaderState)\n\n    return (\n      <div>\n        <AppBar position=\"relative\">\n        <Toolbar style = {{itemAlign: \"center\"}}>\n          \n          </Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" align='center' noWrap >\n            Graph web App\n          </Typography>\n        <Toolbar style = {{itemAlign: \"center\"}}>\n          \n        </Toolbar>\n        </AppBar>\n\n        <Container style={{marginTop:\"2em\"}}>\n        <Grid container alignItems=\"center\">\n        <Grid item xs={6}>\n        <Button \n            variant=\"contained\"\n            color=\"default\"\n\n            startIcon={<CloudUploadIcon />}\n            fullWidth={true}\n        >\n        <Input type=\"file\"\n          id=\"avatar\" name=\"graphe\"\n          accept=\".txt\" onChange={this.sendFileForFirstDraw}\n          fullWidth={true}\n          style={{opacity:0, position:\"absolute\"}}\n          />  \n        Upload graph file here\n      </Button>\n        </Grid>\n        <Grid item xs={6}>\n        <Button \n            variant=\"contained\"\n            color=\"primary\"\n\n            endIcon={<SendIcon></SendIcon>}\n            onClick={this.sendFileForSteinerResult}\n            fullWidth={true}\n        >\n        Steiner Result\n\n      </Button>\n        </Grid>\n        </Grid>\n        \n      \n      \n  \n        <div id=\"mynetwork\">\n        <div className=\"ui active centered inline loader\" style={{display:this.state.loaderState}}></div>\n        </div>\n        <Grid container alignItems=\"center\">\n        <Grid item xs={6}>\n        <Button \n          variant=\"outlined\"\n          color=\"primary\"\n          style={{textAlign: 'center'}}\n          fullWidth={true}>Poids={this.state.Poids}</Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Button \n          variant=\"outlined\"\n          color=\"primary\"\n          style={{textAlign: 'center'}}\n          fullWidth={true}>Penalité={this.state.Penality}</Button>\n          \n        </Grid>\n        </Grid>\n       \n      </Container>\n      </div>\n\n\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}